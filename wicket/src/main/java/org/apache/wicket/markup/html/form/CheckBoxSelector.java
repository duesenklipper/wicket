package org.apache.wicket.markup.html.form;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.wicket.ResourceReference;
import org.apache.wicket.ajax.WicketAjaxReference;
import org.apache.wicket.behavior.HeaderContributor;
import org.apache.wicket.markup.html.IHeaderContributor;
import org.apache.wicket.markup.html.IHeaderResponse;
import org.apache.wicket.markup.html.JavascriptPackageResource;
import org.apache.wicket.markup.html.WicketEventReference;
import org.apache.wicket.util.string.JavascriptUtils;
import org.apache.wicket.util.template.PackagedTextTemplate;
import org.apache.wicket.util.template.TextTemplate;


/**
 * "select all"-component for a loose collection of {@link CheckBox}es.
 * 
 * @author menzelc
 */
public class CheckBoxSelector extends LabeledWebMarkupContainer implements IHeaderContributor
{

	private final List<CheckBox> checkBoxes = new ArrayList<CheckBox>();
	private final static HeaderContributor JS_CONTRIBUTOR = JavascriptPackageResource.getHeaderContribution(new ResourceReference(
		CheckBoxSelector.class, "CheckBoxSelector.js"));
	private final static HeaderContributor WICKET_AJAX = JavascriptPackageResource.getHeaderContribution(WicketAjaxReference.INSTANCE);
	private final static HeaderContributor WICKET_EVENT = JavascriptPackageResource.getHeaderContribution(WicketEventReference.INSTANCE);
	private final boolean autoUpdate;

	/*
	 * Javascript array literal containing the markup IDs of the checkboxes we want to
	 * check/uncheck. Example: "['foo', 'bar', 'baz']". Generated by
	 * JavaScriptUtils.buildMarkupIdJSArrayLiteral().
	 */
	private String checkBoxIdArrayLiteral;

	/**
	 * @param id
	 *            wicket id
	 * @param autoUpdate
	 *            true if the targetted checkboxes should also update the selector if their checked
	 *            state changes
	 * @param boxes
	 *            targetted checkboxes
	 */
	public CheckBoxSelector(String id, boolean autoUpdate, CheckBox... boxes)
	{
		super(id);
		this.autoUpdate = autoUpdate;
		setOutputMarkupId(true);
		// get wicket js stuff in case the page doesn't have it yet.
		add(WICKET_EVENT);
		add(WICKET_AJAX);
		// get our own javascript
		add(JS_CONTRIBUTOR);
		addCheckBoxes(boxes);
	}

	private void addCheckBoxes(CheckBox... boxes)
	{
		checkBoxes.addAll(Arrays.asList(boxes));
		checkBoxIdArrayLiteral = JavascriptUtils.buildMarkupIdJSArrayLiteral(checkBoxes);
	}

	public void renderHead(IHeaderResponse response)
	{
		if (autoUpdate)
		{
			// attach the selector update handler to each targeted checkbox
			TextTemplate template = new PackagedTextTemplate(CheckBoxSelector.class,
				"CheckBoxSelector.autoUpdate.template.js");
			Map<String, Object> variables = new HashMap<String, Object>();

			// these are the targeted checkboxes
			variables.put("checkBoxIdArrayLiteral", checkBoxIdArrayLiteral);

			// this is the selector itself
			variables.put("selectorId", this.getMarkupId());

			// do it on load
			response.renderOnLoadJavascript(template.asString(variables));
		}

		// attach the onclick handler to the selector itself. variables are the same as above.
		TextTemplate template = new PackagedTextTemplate(CheckBoxSelector.class,
			"CheckBoxSelector.onClick.template.js");
		Map<String, Object> variables = new HashMap<String, Object>();
		variables.put("checkBoxIdArrayLiteral", checkBoxIdArrayLiteral);
		variables.put("selectorId", this.getMarkupId());
		response.renderOnLoadJavascript(template.asString(variables));
	}
}
